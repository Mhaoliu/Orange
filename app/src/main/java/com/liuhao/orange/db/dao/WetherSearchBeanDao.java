package com.liuhao.orange.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.liuhao.orange.db.bean.WetherSearchBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WETHER_SEARCH_BEAN".
*/
public class WetherSearchBeanDao extends AbstractDao<WetherSearchBean, Long> {

    public static final String TABLENAME = "WETHER_SEARCH_BEAN";

    /**
     * Properties of entity WetherSearchBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property SearTime = new Property(2, Long.class, "searTime", false, "SEAR_TIME");
        public final static Property CityName = new Property(3, String.class, "cityName", false, "CITY_NAME");
    }


    public WetherSearchBeanDao(DaoConfig config) {
        super(config);
    }
    
    public WetherSearchBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WETHER_SEARCH_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"USER_NAME\" TEXT," + // 1: userName
                "\"SEAR_TIME\" INTEGER," + // 2: searTime
                "\"CITY_NAME\" TEXT);"); // 3: cityName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WETHER_SEARCH_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WetherSearchBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        Long searTime = entity.getSearTime();
        if (searTime != null) {
            stmt.bindLong(3, searTime);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(4, cityName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WetherSearchBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        Long searTime = entity.getSearTime();
        if (searTime != null) {
            stmt.bindLong(3, searTime);
        }
 
        String cityName = entity.getCityName();
        if (cityName != null) {
            stmt.bindString(4, cityName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WetherSearchBean readEntity(Cursor cursor, int offset) {
        WetherSearchBean entity = new WetherSearchBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // searTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // cityName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WetherSearchBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSearTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setCityName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WetherSearchBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WetherSearchBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WetherSearchBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
